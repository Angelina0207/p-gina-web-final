#üìå Parte 1: Configuraci√≥n, estilos y carga de datos
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px

# Configuraci√≥n
st.set_page_config("MBTI x M√∫sica x Vino", layout="wide")

# Estilos
st.markdown("""
    <style>
    html, body, [class*="css"]  {
        font-family: 'Segoe UI', sans-serif;
        background-color: #fff8f0;
        color: #333;
    }
    h1, h2, h3 {
        color: #c94f4f;
    }
    .stButton>button {
        background-color: #ff6666;
        color: white;
        border-radius: 10px;
        padding: 10px 20px;
        font-weight: bold;
        border: none;
    }
    </style>
""", unsafe_allow_html=True)

# Datos
spotify_df = pd.read_csv("spotify-2023.csv", encoding="latin1")
wine_df = pd.read_csv("winemag-data_first150k.csv", on_bad_lines='skip', low_memory=False)
wine_df["points"] = pd.to_numeric(wine_df["points"], errors="coerce")
wine_df["variety"] = wine_df["variety"].fillna("")

# Perfiles MBTI
mbti_perfiles = {
    "INFP": {"descripcion": "So√±ador, sensible, introspectivo", "vino": "Pinot Noir", "color": "#e6ccff"},
    "ENFP": {"descripcion": "Espont√°neo, creativo, sociable", "vino": "Sauvignon Blanc", "color": "#ffe680"},
    "INTJ": {"descripcion": "Anal√≠tico, reservado, estrat√©gico", "vino": "Cabernet Sauvignon", "color": "#c2f0c2"},
    "ISFJ": {"descripcion": "C√°lido, protector, leal", "vino": "Merlot", "color": "#f0d9b5"},
    "ENTP": {"descripcion": "Innovador, conversador, curioso", "vino": "Ros√©", "color": "#ffcce6"},
    "ESFP": {"descripcion": "Alegre, impulsivo, en√©rgico", "vino": "Espumante", "color": "#ffcccc"},
    "INFJ": {"descripcion": "Visionario, intuitivo, profundo", "vino": "Syrah", "color": "#d9d2e9"},
    "ISTJ": {"descripcion": "Tradicional, met√≥dico, pr√°ctico", "vino": "Malbec", "color": "#d9ead3"}
}

#üìå Parte 2: Pesta√±as principales y recomendaciones
# Pesta√±as
tabs = st.tabs(["üè† Inicio", "üéß Recomendaciones", "üéº Explorar canciones", "üîç Buscador", "üìä Estad√≠sticas"])

# Inicio
with tabs[0]:
    st.title("MBTI √ó M√∫sica √ó Vino üç∑üé∂")
    st.markdown("Descubre la m√∫sica y el vino ideal seg√∫n tu personalidad MBTI.")

# Recomendaciones
with tabs[1]:
    st.header("üéß Tus recomendaciones personalizadas")
    tipo = st.selectbox("Selecciona tu tipo de personalidad MBTI:", list(mbti_perfiles.keys()))
    perfil = mbti_perfiles[tipo]
    vino = perfil["vino"]

    st.markdown(f"""
    <div style='background-color:{perfil["color"]}; padding:15px; border-radius:10px'>
        <h2>{tipo} ‚Äî {perfil["descripcion"]}</h2>
        <h4>üç∑ Vino sugerido: <i>{vino}</i></h4>
    </div>
    """, unsafe_allow_html=True)

    canciones = spotify_df[(spotify_df["valence_%"] >= 50) & (spotify_df["energy_%"] >= 50)].sample(3)
    st.subheader("üéµ Canciones recomendadas")
    for _, row in canciones.iterrows():
        st.markdown(f"- **{row['track_name']}** ‚Äî *{row['artist(s)_name']}*")

    st.subheader("üçá Vinos sugeridos")
    vinos_filtrados = wine_df[wine_df["variety"].str.contains(vino, case=False)]
    if vinos_filtrados.empty:
        st.warning("No se encontraron vinos.")
    else:
        for _, row in vinos_filtrados.head(3).iterrows():
            # Obtener t√≠tulo adecuado
            if pd.notna(row.get('title')) and row['title'].strip() != "":
                titulo = row['title']
            elif pd.notna(row.get('designation')) and row['designation'].strip() != "":
                titulo = row['designation']
            elif pd.notna(row.get('variety')) and row['variety'].strip() != "":
                titulo = row['variety']
            elif pd.notna(row.get('winery')) and row['winery'].strip() != "":
                titulo = row['winery']
            else:
                titulo = "Vino sin nombre üç∑"

            st.markdown(f"**{titulo}** ‚Äî ‚≠ê {row['points']} puntos ‚Äî {row.get('country', 'Pa√≠s desconocido')}")
            st.caption(f"*{row.get('description', 'Sin descripci√≥n.')}*")
            st.markdown("---")
# Pesta√±as
tab1, tab2, tab3 = st.tabs(["üéß Recomendaciones", "üöÄ Interactivo", "üìà Estad√≠sticas Spotify"])

# üìå Parte 3: Explorador musical interactivo
with tab3:
    st.header("üìà Explorar canciones por filtros")

    # Asegurar que la columna 'streams' es num√©rica
    if "streams" in spotify_df.columns:
        spotify_df["streams"] = pd.to_numeric(spotify_df["streams"], errors="coerce")

        # Limpiar NaN
        spotify_clean = spotify_df.dropna(subset=["streams", "released_year"])

        if not spotify_clean.empty:
            # Selectbox para a√±o
            a√±o = st.selectbox("A√±o de lanzamiento", sorted(spotify_clean["released_year"].unique()))

            # Rango din√°mico de streams
            max_streams_val = spotify_clean["streams"].dropna().max()
            max_streams = int(max_streams_val) if pd.notna(max_streams_val) else 50_000_000
            min_s, max_s = st.slider("üéß Rango de streams", 0, max_streams, (1_000_000, 10_000_000), step=500_000)

            # Orden por m√©trica
            orden = st.selectbox("Ordenar por", ["streams", "valence_%", "energy_%", "danceability_%"])

            # Filtro
            filtrado = spotify_clean[
                (spotify_clean["released_year"] == a√±o) &
                (spotify_clean["streams"] >= min_s) &
                (spotify_clean["streams"] <= max_s)
            ].sort_values(orden, ascending=False).head(20)

            # Mostrar tabla
            st.dataframe(filtrado[["track_name", "artist(s)_name", "streams"]])
            st.download_button("‚¨áÔ∏è Descargar CSV", filtrado.to_csv(index=False), "filtrado.csv")

            # Gr√°fico: Artistas m√°s frecuentes
            st.subheader("üé§ Artistas m√°s frecuentes")
            top_artistas = spotify_clean["artist(s)_name"].value_counts().head(10)
            fig = px.bar(
                x=top_artistas.index,
                y=top_artistas.values,
                labels={"x": "Artista", "y": "N√∫mero de canciones"},
                title="Top 10 artistas m√°s presentes"
            )
            st.plotly_chart(fig)

            # Gr√°fico: Energ√≠a vs Felicidad
            st.subheader("üéµ Energ√≠a vs Felicidad")
            fig2 = px.scatter(
                spotify_clean.sample(300),
                x="valence_%", y="energy_%",
                hover_data=["track_name", "artist(s)_name"],
                color="energy_%",
                title="Canciones: Valence vs Energ√≠a"
            )
            st.plotly_chart(fig2)
        else:
            st.warning("No hay datos suficientes en Spotify para mostrar estad√≠sticas.")
    else:
        st.error("La columna 'streams' no est√° disponible en el CSV.")
        
# --- Pesta√±a de estad√≠sticas ---
with tab3:
    st.header("üìà An√°lisis de Canciones Populares en Spotify")

    # Limpiar datos vac√≠os
    spotify_clean = spotify_df.dropna(subset=["streams", "released_year"])

    # Rango para filtrar streams
    min_streams = 1_000_000
    max_streams = int(spotify_clean["streams"].dropna().max())

    rango_streams = st.slider("üéß Filtrar por n√∫mero de streams", min_value=min_streams, max_value=max_streams, value=(min_streams, 50_000_000), step=1_000_000)

    # Filtrar canciones seg√∫n streams
    filtrado = spotify_clean[spotify_clean["streams"].between(rango_streams[0], rango_streams[1])]

    if not filtrado.empty:
        st.subheader("üî¢ Total de Streams por A√±o")
        resumen_por_a√±o = filtrado.groupby("released_year")["streams"].sum().reset_index()
        fig_bar = px.bar(resumen_por_a√±o, x="released_year", y="streams", title="üìÖ Streams por A√±o de Lanzamiento", labels={"streams": "Reproducciones", "released_year": "A√±o"})
        st.plotly_chart(fig_bar, use_container_width=True)

        st.subheader("üé∂ Energ√≠a vs Popularidad")
        fig_scatter = px.scatter(
            filtrado,
            x="energy_%",
            y="streams",
            size="valence_%",
            color="released_year",
            hover_data=["track_name", "artist(s)_name"],
            title="‚ö° Energ√≠a vs Streams (Tama√±o: Felicidad)",
            labels={"energy_%": "Energ√≠a", "streams": "Reproducciones"}
        )
        st.plotly_chart(fig_scatter, use_container_width=True)
    else:
        st.warning("No se encontraron canciones en ese rango.")
